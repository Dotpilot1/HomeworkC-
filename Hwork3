#include <iostream>
#include <vector>
#include <iomanip>
#include <chrono>
#include <map>
#include <math.h>

using namespace std;

//aşağıdaki satırları yoruma alarak kodunuzu farklı şekillerde test edebilirsiniz.
#define _TEST_ITERATIVE_
#define _TEST_RECURSIVE_

// Bu odevde global veya statik degisken tanimlanamaz!!!

/* Ozyinelemeli olarak zip zip kurbaganin kac farkli yoldan gittigini bulan fonksiyondur.
 * Bu fonksiyon icinde for ve while kullanamazsiniz ve en az bir kez recursiveFunction
 * fonksiyonu cagri yapilmalidir.
 */
long long recursiveFunction(int numberOfStones)
{
	 static map<long long , long long > memo;
	 if (numberOfStones == 0) {
		 return 1;
	}
	if (numberOfStones <= 2 && numberOfStones>0 ) {
		return numberOfStones;
	}
	if (memo.count(numberOfStones) > 0) {
		return memo[numberOfStones];
	}
    long long result = recursiveFunction(numberOfStones-3) + recursiveFunction(numberOfStones-2) + recursiveFunction(numberOfStones-1);
	memo[numberOfStones] = result;
	return result;
}

/* Yinelemeli olarak zip zip kurbaganin kac farkli yoldan gittigini bulan fonksiyondur.
 * Bu fonksiyon icinde for ve while dongusu kullanilmalidir.
 * Bu fonksiyon icinde baska bir fonksiyona (kendisi dahil) cagri yapilamaz.
 */
long long iterativeFunction(int numberOfStones)
{
	static map<long long, long long > memo;

	if (numberOfStones == 0 || numberOfStones==1) {
		 memo[0] = 1;
		 memo[1] = 1;
		 return 1;
	}
	if (numberOfStones == 2) {
	    memo[2] = 2;
		return 2;
	}
	for (int i = 3;i <= numberOfStones;i++) {
		memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3];
	}
	long long result = memo[numberOfStones];
	return result;
}



int main()
{
	const int MAX_NUMBER_OF_STONES{ 72 };

	cout << setfill(' ');

	cout.imbue(locale(""));

	for (auto i = 1; i <= MAX_NUMBER_OF_STONES; ++i)
	{

#ifdef _TEST_ITERATIVE_
		{
			long long tempResult = { 0 };

			auto start = std::chrono::steady_clock::now();
			tempResult = iterativeFunction(i);
			auto stop = std::chrono::steady_clock::now();
			auto duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start).count();


			cout << "iterative" << setw(4) << i << " -> " << tempResult << " ( " << duration << "us )\n";
		}
#endif

#ifdef _TEST_RECURSIVE_
		{
			long long tempResult = { 0 };

			auto start = std::chrono::steady_clock::now();
			tempResult = recursiveFunction(i);
			auto stop = std::chrono::steady_clock::now();
			auto duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start).count();

			cout << "recursive" << setw(4) << i << " -> " << tempResult << " ( " << duration << "us )\n\n";
		}
#endif

	}

	return 0;
}






